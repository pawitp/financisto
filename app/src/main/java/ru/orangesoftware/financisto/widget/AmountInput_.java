//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.6.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package ru.orangesoftware.financisto.widget;

import android.content.Context;
import android.content.res.Resources;
import android.util.AttributeSet;
import android.view.View;
import androidx.core.content.ContextCompat;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import ru.orangesoftware.financisto.R;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 */
@SuppressWarnings("unused")
public final class AmountInput_
    extends AmountInput
    implements HasViews, OnViewChangedListener
{
    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    public AmountInput_(Context context, AttributeSet attrs) {
        super(context, attrs);
        init_();
    }

    public AmountInput_(Context context) {
        super(context);
        init_();
    }

    public static AmountInput build(Context context, AttributeSet attrs) {
        AmountInput_ instance = new AmountInput_(context, attrs);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The alreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <code>&lt;merge /&gt;</code> tag.
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), R.layout.amount_input, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        Resources resources_ = getContext().getResources();

        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.minHeight = resources_.getDimensionPixelSize(R.dimen.select_entry_height_no_label);
        this.plusDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_action_add);
        this.minusDrawable = ContextCompat.getDrawable(getContext(), R.drawable.ic_action_minus);
        this.plusColor = ContextCompat.getColor(getContext(), R.color.positive_amount);
        this.minusColor = ContextCompat.getColor(getContext(), R.color.negative_amount);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    public static AmountInput build(Context context) {
        AmountInput_ instance = new AmountInput_(context);
        instance.onFinishInflate();
        return instance;
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.signSwitcher = hasViews.internalFindViewById(R.id.signSwitcher);
        this.primary = hasViews.internalFindViewById(R.id.primary);
        this.delimiter = hasViews.internalFindViewById(R.id.delimiter);
        this.secondary = hasViews.internalFindViewById(R.id.secondary);
        View view_calculator = hasViews.internalFindViewById(R.id.calculator);

        if (view_calculator!= null) {
            view_calculator.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    AmountInput_.this.onClickCalculator();
                }
            }
            );
        }
        if (this.signSwitcher!= null) {
            this.signSwitcher.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    AmountInput_.this.onClickSignSwitcher();
                }
            }
            );
        }
        initialize();
    }
}
